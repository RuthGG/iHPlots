Haplotypes<-read.table(HaplotypesFile,stringsAsFactors=FALSE)
Samples<-read.table(SamplesFile,header=TRUE,stringsAsFactors=FALSE)
# SUBSET INSIDE AND NO-SINGLETON ##########################################################################################
# Exclude less than X counts (and positions with NA in the AltCount.)
# Filter haplotypes to contain only accepted positions
Haplotypes<-Haplotypes[,Positions$ID]
# Update AltCount in positions file, just in case
Positions$AltCount<-apply(Haplotypes,2,function(v){sum(as.integer(v),na.rm=TRUE)})
CountThreshold<-sapply(Positions$AltCount,function(x){if(is.na(x)){FALSE}else if(x<MinCount | (nrow(Haplotypes)-x)<MinCount){FALSE}else{TRUE}})
SelectedCols<-Positions[with(Positions, !(VariantType %in% "Breakpoint") & abs(as.integer(RelativePosition))<=FlankingRegion & CountThreshold),"ID"]
if(length(SelectedCols)==0){
write("\nThere are no SNPs inside the inversion!\n",stdout())
q()
}else if(length(SelectedCols)==1){
write("\nThere is only one SNP inside the inversion!\n",stdout())
q()
}
# Make a table with haplotype strings + ID.
StringHaps<-apply(Haplotypes[,SelectedCols],1,paste,collapse="")
tempTable<-table(StringHaps)
HaplotypesTable<-data.frame(HapID=factor(paste0("Hap",seq(1:nrow(tempTable))),levels=paste0("Hap",seq(1:nrow(tempTable)))),Hap01=names(tempTable),Count=as.vector(tempTable),stringsAsFactors=FALSE)
rownames(HaplotypesTable)<-HaplotypesTable$Hap01
Samples$HapID<-HaplotypesTable[StringHaps,"HapID"]
library(reshape2)
library(plyr)
GenoCounts<-dcast(Samples,formula=list(.(HapID),.(Genotype)),value.var="HapID",fun.aggregate=length)
GenoCounts
if( is.null(GenoCounts$I )){GenoCounts$I<-0}
if( is.null(GenoCounts$S )){GenoCounts$S<-0}
GenoCounts
args = c("6:167610402" , "6:167771360" ,
"analysis/2020-11-19_01_phase/HsInv0389/HsInv0389_phased.vcf",
"analysis/2020-11-19_01_phase/HsInv0389/1KGP_haplotypes.txt",
NA, "tmp/2020-11-19_02_ihplot/HsInv0389/")
if (length(args)==0 | length(args)<6 | args[1]=="help") {
# ***************************************************
Usage()
# ***************************************************
} else {
BP1Pos<-args[1]
BP2Pos<-args[2]
PhasedFile<-args[3]
HaplotypesFile<-args[4]
ancOrient<-args[5]
Prefix<-args[6]
}
# Inversion coordinates info
Chromosome<-strsplit(BP1Pos,split=":")[[1]][1]
BP1<-as.integer(strsplit(BP1Pos,split=":")[[1]][2])
BP2<-as.integer(strsplit(BP2Pos,split=":")[[1]][2])
# Phased Inversion data -> parse to give the same format as Haplotypes
lenPhased <- length(readLines(PhasedFile))
Phased<-read.table(PhasedFile, stringsAsFactors=FALSE, comment.char = "", skip = lenPhased-2, header = TRUE)
colnames(Phased)[c(1:7)]<-c("CHROM","POS","ID","REF","ALT","VT","AA")
Phased[1,]<-gsub(":.*$" , "", Phased)
Males<-read.table("data/raw/1KGP/integrated_call_male_samples_v3.20130502.ALL.panel", header = TRUE)
if (Chromosome == "X"){
for(m in Males$sample){
if(m %in% colnames(Phased)){
Phased[,m] <- ifelse(Phased[,m] == "0|0", "0", "1")
}
}
}
# Fill in some gaps in the phased info
Phased[1,c("CHROM","POS","ID","REF","ALT","VT","AA")]<-c(Chromosome,BP1,NA,"Std","Inv","Breakpoint",ancOrient)
Phased[2,]<-Phased[1,]
Phased[2,c("POS")]<-c(BP2)
# Add phase info to general info
Haplotypes<-rbind(Haplotypes, Phased[, colnames(Haplotypes)])
# Check if there are duplicated lines. If so, remove them
Haplotypes<-Haplotypes[!duplicated(Haplotypes),]
# HAPLOTYPES
# ----------------------------------------------------------------------
DiploidHaps<-Haplotypes[,setdiff(names(Haplotypes),c("CHROM","POS","ID","REF","ALT","VT","AA"))]
Ploidy<-sapply(DiploidHaps[1,],function(x){if(x %in% c(0,1)){"Haploid"}else if(x %in% c("0|0","0|1","1|0","1|1")){"Diploid"}else{NA}})
HaploidHaps<-NULL
HaploidNames<-NULL
for (i in 1:ncol(DiploidHaps)) {
if(Ploidy[i] %in% "Diploid"){
IndivName<-names(Ploidy[i])
NewHaps<-t(sapply(DiploidHaps[,i],function(x)strsplit(x,split="|",fixed=TRUE)[[1]]))
rownames(NewHaps)<-seq(1,nrow(NewHaps),1)
HaploidHaps<-cbind(HaploidHaps,NewHaps)
HaploidNames<-c(HaploidNames,paste0(IndivName,"_1"),paste0(IndivName,"_2"))
}else{
IndivName<-names(Ploidy[i])
HaploidHaps<-cbind(HaploidHaps,DiploidHaps[,i])
HaploidNames<-c(HaploidNames,paste0(IndivName,"_1"))
}
}
colnames(HaploidHaps)<-HaploidNames
# POSITIONS
# ----------------------------------------------------------------------
Positions<-Haplotypes[,c("CHROM","POS","ID","REF","ALT","VT","AA")]
names(Positions)<-c("Chr","Position","rsID","Ref","Alt","VariantType","AA")
# Add Relative position, AltCount and AncestralAllele[0|1]
Positions$Position<-as.numeric(Positions$Position)
Positions$RelativePosition<-sapply(Positions$Position,function(x){
if(x<BP1){x-BP1}else if(x>=BP1 & x<=BP2){0}else{x-BP2}
})
Positions$AncestralAllele<-apply(Positions[,c("Ref","Alt","AA")],1,function(v){
v[3]<-toupper(strsplit(v[3],split="|")[[1]][1])
v<-toupper(v)
if(v[3] %in% v[1]){
0
}else if(v[3] %in% v[2]){
1
}else{
NA
}
})
Positions$AncestralAllele[Positions$VariantType %in% "Breakpoint"]<-as.integer(as.character(factor(ancOrient,levels=c("Std","Inv"),labels=c("0","1"))))
# Order hap matrix and Positions According to Position
HaploidHaps<-HaploidHaps[order(Positions$Position),]
Positions<-Positions[order(Positions$Position),]
Positions$ID<-paste0("Pos",1:nrow(Positions))
rownames(HaploidHaps)<-Positions$ID
Positions$AltCount<-apply(HaploidHaps,1,function(v)sum(as.numeric(v),na.rm=TRUE))
args = c("X:153577719" , "X:153612371" ,
"analysis/2020-11-19_01_phase/HsInv0389/HsInv0389_phased.vcf",
"analysis/2020-11-19_01_phase/HsInv0389/1KGP_haplotypes.txt",
NA, "tmp/2020-11-19_02_ihplot/HsInv0389/")
if (length(args)==0 | length(args)<6 | args[1]=="help") {
# ***************************************************
Usage()
# ***************************************************
} else {
BP1Pos<-args[1]
BP2Pos<-args[2]
PhasedFile<-args[3]
HaplotypesFile<-args[4]
ancOrient<-args[5]
Prefix<-args[6]
}
# Inversion coordinates info
Chromosome<-strsplit(BP1Pos,split=":")[[1]][1]
BP1<-as.integer(strsplit(BP1Pos,split=":")[[1]][2])
BP2<-as.integer(strsplit(BP2Pos,split=":")[[1]][2])
# Data from 1000 genomes
Haplotypes<-read.table(HaplotypesFile,header=TRUE,stringsAsFactors=FALSE)
# PHASED GENOTYPES
# ----------------------------------------------------------------------
# Phased Inversion data -> parse to give the same format as Haplotypes
lenPhased <- length(readLines(PhasedFile))
Phased<-read.table(PhasedFile, stringsAsFactors=FALSE, comment.char = "", skip = lenPhased-2, header = TRUE)
colnames(Phased)[c(1:7)]<-c("CHROM","POS","ID","REF","ALT","VT","AA")
Phased[1,]<-gsub(":.*$" , "", Phased)
Males<-read.table("data/raw/1KGP/integrated_call_male_samples_v3.20130502.ALL.panel", header = TRUE)
if (Chromosome == "X"){
for(m in Males$sample){
if(m %in% colnames(Phased)){
Phased[,m] <- ifelse(Phased[,m] == "0|0", "0", "1")
}
}
}
# Fill in some gaps in the phased info
Phased[1,c("CHROM","POS","ID","REF","ALT","VT","AA")]<-c(Chromosome,BP1,NA,"Std","Inv","Breakpoint",ancOrient)
Phased[2,]<-Phased[1,]
Phased[2,c("POS")]<-c(BP2)
# Add phase info to general info
Haplotypes<-rbind(Haplotypes, Phased[, colnames(Haplotypes)])
# Check if there are duplicated lines. If so, remove them
Haplotypes<-Haplotypes[!duplicated(Haplotypes),]
# HAPLOTYPES
# ----------------------------------------------------------------------
DiploidHaps<-Haplotypes[,setdiff(names(Haplotypes),c("CHROM","POS","ID","REF","ALT","VT","AA"))]
Ploidy<-sapply(DiploidHaps[1,],function(x){if(x %in% c(0,1)){"Haploid"}else if(x %in% c("0|0","0|1","1|0","1|1")){"Diploid"}else{NA}})
HaploidHaps<-NULL
HaploidNames<-NULL
for (i in 1:ncol(DiploidHaps)) {
if(Ploidy[i] %in% "Diploid"){
IndivName<-names(Ploidy[i])
NewHaps<-t(sapply(DiploidHaps[,i],function(x)strsplit(x,split="|",fixed=TRUE)[[1]]))
rownames(NewHaps)<-seq(1,nrow(NewHaps),1)
HaploidHaps<-cbind(HaploidHaps,NewHaps)
HaploidNames<-c(HaploidNames,paste0(IndivName,"_1"),paste0(IndivName,"_2"))
}else{
IndivName<-names(Ploidy[i])
HaploidHaps<-cbind(HaploidHaps,DiploidHaps[,i])
HaploidNames<-c(HaploidNames,paste0(IndivName,"_1"))
}
}
colnames(HaploidHaps)<-HaploidNames
# POSITIONS
# ----------------------------------------------------------------------
Positions<-Haplotypes[,c("CHROM","POS","ID","REF","ALT","VT","AA")]
names(Positions)<-c("Chr","Position","rsID","Ref","Alt","VariantType","AA")
# Add Relative position, AltCount and AncestralAllele[0|1]
Positions$Position<-as.numeric(Positions$Position)
Positions$RelativePosition<-sapply(Positions$Position,function(x){
if(x<BP1){x-BP1}else if(x>=BP1 & x<=BP2){0}else{x-BP2}
})
Positions$AncestralAllele<-apply(Positions[,c("Ref","Alt","AA")],1,function(v){
v[3]<-toupper(strsplit(v[3],split="|")[[1]][1])
v<-toupper(v)
if(v[3] %in% v[1]){
0
}else if(v[3] %in% v[2]){
1
}else{
NA
}
})
Positions$AncestralAllele[Positions$VariantType %in% "Breakpoint"]<-as.integer(as.character(factor(ancOrient,levels=c("Std","Inv"),labels=c("0","1"))))
# Order hap matrix and Positions According to Position
HaploidHaps<-HaploidHaps[order(Positions$Position),]
Positions<-Positions[order(Positions$Position),]
Positions$ID<-paste0("Pos",1:nrow(Positions))
rownames(HaploidHaps)<-Positions$ID
Positions$AltCount<-apply(HaploidHaps,1,function(v)sum(as.numeric(v),na.rm=TRUE))
# SAMPLES
# ----------------------------------------------------------------------
# Make samples from haplotypes
Samples<-data.frame(Sample=HaploidNames,stringsAsFactors=FALSE)
# Take individuals ID
Samples$ID<-sapply(Samples$Sample,function(x){strsplit(x,split="_")[[1]][1]})
# Take populations from 1KGP
IndivKGP<-read.table("data/raw/1KGP/integrated_call_samples_v3.20130502.ALL.panel",header=TRUE)[,1:3]
names(IndivKGP)<-c("sample","population","superpopulation")
rownames(IndivKGP)<-IndivKGP$sample
Samples$Population<-IndivKGP[Samples$ID,"population"]
Samples$Superpopulation<-IndivKGP[Samples$ID,"superpopulation"]
# Take genotypes info from Phased info : 0 = STD, 1 = INV
Samples$FullGenotype<-NA
Samples$GenotypeScore<-NA
Samples$Genotype<-NA
Samples$Genotype<-sapply(Samples$ID,  function(x){
if( Phased[1,x] %in% c("0|0", "0")){"S"}
else if(Phased[1,x] %in% c("1|1", "1")){"I"}
else if(Phased[1,x] %in% c("1|0")){"IS"}
else if(Phased[1,x] %in% c("0|1")){"SI"}
})
Samples$FullGenotype<-sapply(Samples$ID,  function(x){
if( Phased[1,x] %in% c("0|0", "0")){"STD"}else if(Phased[1,x] %in% c("1|1", "1")){"INV"}else{"HET"}
})
Samples$Genotype<-substr(Samples$FullGenotype, 1, 1)
View(Samples)
Samples$Genotype<-sapply(Samples$ID,  function(x){
if( Phased[1,x] %in% c("0|0", "0")){"S"}
else if(Phased[1,x] %in% c("1|1", "1")){"I"}
else if(Phased[1,x] %in% c("1|0")){"IS"}
else if(Phased[1,x] %in% c("0|1")){"SI"}
})
Samples$FullGenotype<-sapply(Samples$ID,  function(x){
if( Phased[1,x] %in% c("0|0", "0")){"STD"}else if(Phased[1,x] %in% c("1|1", "1")){"INV"}else{"HET"}
})
args = c("X:153577719" , "X:153612371" ,
"analysis/2020-11-19_01_phase/HsInv0389/HsInv0389_phased.vcf",
"analysis/2020-11-19_01_phase/HsInv0389/1KGP_haplotypes.txt",
NA, "tmp/2020-11-28/_02_ihplot/HsInv0389/")
Prefix<-args[6]
write.table(Positions[,c("ID","Chr","Position","rsID","Ref","Alt","VariantType","RelativePosition","AncestralAllele","AltCount")],file=paste0(Prefix,"positions.txt"),row.names=FALSE,sep="\t", quote=FALSE)
write.table(t(HaploidHaps),file=paste0(Prefix,"haplotypes.txt"),sep="\t",quote=FALSE)
write.table(Samples,file=paste0(Prefix,"samples.txt"),row.names=FALSE,sep="\t",quote=FALSE)
args = c("X:153577719" , "X:153612371" ,
"analysis/2020-11-19_01_phase/HsInv0389/HsInv0389_phased.vcf",
"analysis/2020-11-19_01_phase/HsInv0389/1KGP_haplotypes.txt",
NA, "tmp/2020-11-28_02_ihplot/HsInv0389/")
Prefix<-args[6]
write.table(Positions[,c("ID","Chr","Position","rsID","Ref","Alt","VariantType","RelativePosition","AncestralAllele","AltCount")],file=paste0(Prefix,"positions.txt"),row.names=FALSE,sep="\t", quote=FALSE)
write.table(t(HaploidHaps),file=paste0(Prefix,"haplotypes.txt"),sep="\t",quote=FALSE)
write.table(Samples,file=paste0(Prefix,"samples.txt"),row.names=FALSE,sep="\t",quote=FALSE)
args = c("X:153577719" , "X:153612371" ,
"analysis/2020-11-19_01_phase/HsInv0389/HsInv0389_phased.vcf",
"analysis/2020-11-19_01_phase/HsInv0389/1KGP_haplotypes.txt",
NA, "tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/")
if (length(args)==0 | length(args)<6 | args[1]=="help") {
# ***************************************************
Usage()
# ***************************************************
} else {
BP1Pos<-args[1]
BP2Pos<-args[2]
PhasedFile<-args[3]
HaplotypesFile<-args[4]
ancOrient<-args[5]
Prefix<-args[6]
}
write.table(Positions[,c("ID","Chr","Position","rsID","Ref","Alt","VariantType","RelativePosition","AncestralAllele","AltCount")],file=paste0(Prefix,"positions.txt"),row.names=FALSE,sep="\t", quote=FALSE)
write.table(t(HaploidHaps),file=paste0(Prefix,"haplotypes.txt"),sep="\t",quote=FALSE)
write.table(Samples,file=paste0(Prefix,"samples.txt"),row.names=FALSE,sep="\t",quote=FALSE)
args = c("tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/positions.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/haplotypes.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/samples.txt",
2, "tmp/2020-11-28_02_ihplot/01_Region/HsInv0389", 0)
if (length(args)==0 | length(args)<5 | args[1]=="help") {
# ***************************************************
Usage()
# ***************************************************
} else {
PositionsFile<-args[1]
HaplotypesFile<-args[2]
SamplesFile<-args[3]
MinCount<-as.numeric(args[4])
Prefix<-args[5]
FlankingRegion<-if(args[6]>0){as.integer(args[6])}else{0}
}
# READ DATA ###############################################################################################################
# Read data, create 3 data structures: Haplotypes matrix, Positions info, Samples info
Positions<-read.table(PositionsFile,header=TRUE,stringsAsFactors=FALSE)
rownames(Positions)<-Positions$ID
Haplotypes<-read.table(HaplotypesFile,stringsAsFactors=FALSE)
Samples<-read.table(SamplesFile,header=TRUE,stringsAsFactors=FALSE)
# SUBSET INSIDE AND NO-SINGLETON ##########################################################################################
# Exclude less than X counts (and positions with NA in the AltCount.)
# Filter haplotypes to contain only accepted positions
Haplotypes<-Haplotypes[,Positions$ID]
# Update AltCount in positions file, just in case
Positions$AltCount<-apply(Haplotypes,2,function(v){sum(as.integer(v),na.rm=TRUE)})
CountThreshold<-sapply(Positions$AltCount,function(x){if(is.na(x)){FALSE}else if(x<MinCount | (nrow(Haplotypes)-x)<MinCount){FALSE}else{TRUE}})
SelectedCols<-Positions[with(Positions, !(VariantType %in% "Breakpoint") & abs(as.integer(RelativePosition))<=FlankingRegion & CountThreshold),"ID"]
if(length(SelectedCols)==0){
write("\nThere are no SNPs inside the inversion!\n",stdout())
q()
}else if(length(SelectedCols)==1){
write("\nThere is only one SNP inside the inversion!\n",stdout())
q()
}
# Make a table with haplotype strings + ID.
StringHaps<-apply(Haplotypes[,SelectedCols],1,paste,collapse="")
tempTable<-table(StringHaps)
HaplotypesTable<-data.frame(HapID=factor(paste0("Hap",seq(1:nrow(tempTable))),levels=paste0("Hap",seq(1:nrow(tempTable)))),Hap01=names(tempTable),Count=as.vector(tempTable),stringsAsFactors=FALSE)
rownames(HaplotypesTable)<-HaplotypesTable$Hap01
Samples$HapID<-HaplotypesTable[StringHaps,"HapID"]
library(reshape2)
library(plyr)
GenoCounts<-dcast(Samples,formula=list(.(HapID),.(Genotype)),value.var="HapID",fun.aggregate=length)
if( is.null(GenoCounts$I )){GenoCounts$I<-0}
if( is.null(GenoCounts$S )){GenoCounts$S<-0}
GenoCounts<-dcast(Samples,formula=list(.(HapID),.(Genotype)),value.var="HapID",fun.aggregate=length)
if( is.null(GenoCounts$I )){GenoCounts$I<-0}
if( is.null(GenoCounts$S )){GenoCounts$S<-0}
GenoCounts
GenoCounts<-dcast(Samples,formula=list(.(HapID),.(Genotype)),value.var="HapID",fun.aggregate=length)
if( is.null(GenoCounts$I )){GenoCounts$I<-0}
if( is.null(GenoCounts$S )){GenoCounts$S<-0}
if( is.null(GenoCounts$S )){GenoCounts$SI<-0}
if( is.null(GenoCounts$S )){GenoCounts$IS<-0}
if( is.null(GenoCounts$I )){GenoCounts$I<-0}
if( is.null(GenoCounts$S )){GenoCounts$S<-0}
if( is.null(GenoCounts$SI )){GenoCounts$SI<-0}
if( is.null(GenoCounts$IS )){GenoCounts$IS<-0}
GenoCounts
# Make a table with haplotype strings + ID.
StringHaps<-apply(Haplotypes[,SelectedCols],1,paste,collapse="")
tempTable<-table(StringHaps)
HaplotypesTable<-data.frame(HapID=factor(paste0("Hap",seq(1:nrow(tempTable))),levels=paste0("Hap",seq(1:nrow(tempTable)))),Hap01=names(tempTable),Count=as.vector(tempTable),stringsAsFactors=FALSE)
rownames(HaplotypesTable)<-HaplotypesTable$Hap01
Samples$HapID<-HaplotypesTable[StringHaps,"HapID"]
args = c("tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/positions.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/haplotypes.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/samples.txt",
2, "tmp/2020-11-28_02_ihplot/01_Region/HsInv0389", 0)
if (length(args)==0 | length(args)<5 | args[1]=="help") {
# ***************************************************
Usage()
# ***************************************************
} else {
PositionsFile<-args[1]
HaplotypesFile<-args[2]
SamplesFile<-args[3]
MinCount<-as.numeric(args[4])
Prefix<-args[5]
FlankingRegion<-if(args[6]>0){as.integer(args[6])}else{0}
}
# Read data, create 3 data structures: Haplotypes matrix, Positions info, Samples info
Positions<-read.table(PositionsFile,header=TRUE,stringsAsFactors=FALSE)
rownames(Positions)<-Positions$ID
Haplotypes<-read.table(HaplotypesFile,stringsAsFactors=FALSE)
Samples<-read.table(SamplesFile,header=TRUE,stringsAsFactors=FALSE)
# SUBSET INSIDE AND NO-SINGLETON ##########################################################################################
# Exclude less than X counts (and positions with NA in the AltCount.)
# Filter haplotypes to contain only accepted positions
Haplotypes<-Haplotypes[,Positions$ID]
# Update AltCount in positions file, just in case
Positions$AltCount<-apply(Haplotypes,2,function(v){sum(as.integer(v),na.rm=TRUE)})
CountThreshold<-sapply(Positions$AltCount,function(x){if(is.na(x)){FALSE}else if(x<MinCount | (nrow(Haplotypes)-x)<MinCount){FALSE}else{TRUE}})
SelectedCols<-Positions[with(Positions, !(VariantType %in% "Breakpoint") & abs(as.integer(RelativePosition))<=FlankingRegion & CountThreshold),"ID"]
if(length(SelectedCols)==0){
write("\nThere are no SNPs inside the inversion!\n",stdout())
q()
}else if(length(SelectedCols)==1){
write("\nThere is only one SNP inside the inversion!\n",stdout())
q()
}
View(Samples)
# Make a table with haplotype strings + ID.
StringHaps<-apply(Haplotypes[,SelectedCols],1,paste,collapse="")
tempTable<-table(StringHaps)
HaplotypesTable<-data.frame(HapID=factor(paste0("Hap",seq(1:nrow(tempTable))),levels=paste0("Hap",seq(1:nrow(tempTable)))),Hap01=names(tempTable),Count=as.vector(tempTable),stringsAsFactors=FALSE)
rownames(HaplotypesTable)<-HaplotypesTable$Hap01
Samples$HapID<-HaplotypesTable[StringHaps,"HapID"]
View(Samples)
args = c("tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/positions.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/haplotypes.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/samples.txt",
2, "tmp/2020-11-28_02_ihplot/01_Region/HsInv0389", 0)
PositionsFile<-args[1]
HaplotypesFile<-args[2]
SamplesFile<-args[3]
MinCount<-as.numeric(args[4])
Prefix<-args[5]
FlankingRegion<-if(args[6]>0){as.integer(args[6])}else{0}
# Read data, create 3 data structures: Haplotypes matrix, Positions info, Samples info
Positions<-read.table(PositionsFile,header=TRUE,stringsAsFactors=FALSE)
rownames(Positions)<-Positions$ID
Haplotypes<-read.table(HaplotypesFile,stringsAsFactors=FALSE)
Samples<-read.table(SamplesFile,header=TRUE,stringsAsFactors=FALSE)
args = c("tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/positions.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/haplotypes.txt" ,
"tmp/2020-11-28_02_ihplot/00_Complete/HsInv0389/samples.txt",
2, "tmp/2020-11-28_02_ihplot/01_Region/HsInv0389", 0)
PositionsFile<-args[1]
HaplotypesFile<-args[2]
SamplesFile<-args[3]
MinCount<-as.numeric(args[4])
Prefix<-args[5]
FlankingRegion<-if(args[6]>0){as.integer(args[6])}else{0}
Positions<-read.table(PositionsFile,header=TRUE,stringsAsFactors=FALSE)
rownames(Positions)<-Positions$ID
Haplotypes<-read.table(HaplotypesFile,stringsAsFactors=FALSE)
Samples<-read.table(SamplesFile,header=TRUE,stringsAsFactors=FALSE)
View(Positions)
View(Positions)
View(Samples)
# READ DATA ###############################################################################################################
# Read data, create 3 data structures: Haplotypes matrix, Positions info, Samples info
Positions<-read.table(PositionsFile,header=TRUE,stringsAsFactors=FALSE)
rownames(Positions)<-Positions$ID
Haplotypes<-read.table(HaplotypesFile,stringsAsFactors=FALSE)
Samples<-read.table(SamplesFile,header=TRUE,stringsAsFactors=FALSE)
# SUBSET INSIDE AND NO-SINGLETON ##########################################################################################
# Exclude less than X counts (and positions with NA in the AltCount.)
# Filter haplotypes to contain only accepted positions
Haplotypes<-Haplotypes[,Positions$ID]
# Update AltCount in positions file, just in case
Positions$AltCount<-apply(Haplotypes,2,function(v){sum(as.integer(v),na.rm=TRUE)})
CountThreshold<-sapply(Positions$AltCount,function(x){if(is.na(x)){FALSE}else if(x<MinCount | (nrow(Haplotypes)-x)<MinCount){FALSE}else{TRUE}})
SelectedCols<-Positions[with(Positions, !(VariantType %in% "Breakpoint") & abs(as.integer(RelativePosition))<=FlankingRegion & CountThreshold),"ID"]
if(length(SelectedCols)==0){
write("\nThere are no SNPs inside the inversion!\n",stdout())
q()
}else if(length(SelectedCols)==1){
write("\nThere is only one SNP inside the inversion!\n",stdout())
q()
}
# Make a table with haplotype strings + ID.
StringHaps<-apply(Haplotypes[,SelectedCols],1,paste,collapse="")
tempTable<-table(StringHaps)
HaplotypesTable<-data.frame(HapID=factor(paste0("Hap",seq(1:nrow(tempTable))),levels=paste0("Hap",seq(1:nrow(tempTable)))),Hap01=names(tempTable),Count=as.vector(tempTable),stringsAsFactors=FALSE)
rownames(HaplotypesTable)<-HaplotypesTable$Hap01
Samples$HapID<-HaplotypesTable[StringHaps,"HapID"]
View(Samples)
# Translate heterozygous into counts
Samples[Samples$FullGenotype == "HET",]
dcast(Samples,formula=list(.(HapID),.(Genotype)),value.var="HapID",fun.aggregate=length)
# Translate heterozygous into counts
Samples$Genotype_tmp<-Samples$Genotype
Samples[Samples$FullGenotype == "HET",]
grep("_1", Samples$Sample)
Samples$Sample
grep("\\_1", Samples$Sample)
grep("_1", Samples$Sample, fixed = TRUE)
Samples[grep("_1", Samples$Sample,),]
Samples[grep("_1", Samples$Sample),]
Samples[grep("_1", Samples$Sample) & Samples$FullGenotype == "HET" ,]
which(grep("_1", Samples$Sample)  )
Samples[which(grep("_1", Samples$Sample)  ) ,]
rownames(Samples)
Samples[rownames(Samples) %in% grep("_1", Samples$Sample) ,]
Samples[rownames(Samples) %in% grep("_1", Samples$Sample) & Samples$FullGenotype == "HET" ,]
Samples[rownames(Samples) %in% grep("_1", Samples$Sample) & Samples$FullGenotype == "HET" , "Genotype_tmp"]
Samples[rownames(Samples) %in% grep("_1", Samples$Sample) & Samples$FullGenotype == "HET" & Samples$Genotype_tmp == "SI", "Genotype_tmp"]
Samples[Samples$FullGenotype == "HET" & (
(rownames(Samples) %in% grep("_1", Samples$Sample)  & Samples$Genotype_tmp == "SI") |
(rownames(Samples) %in% grep("_2", Samples$Sample)  & Samples$Genotype_tmp == "IS")
), ]
Samples[Samples$FullGenotype == "HET" & (
(rownames(Samples) %in% grep("_1", Samples$Sample)  & Samples$Genotype_tmp == "SI") |
(rownames(Samples) %in% grep("_2", Samples$Sample)  & Samples$Genotype_tmp == "IS")
), "Genotype_tmp"]<-"S"
Samples[Samples$FullGenotype == "HET" & (
(rownames(Samples) %in% grep("_2", Samples$Sample)  & Samples$Genotype_tmp == "SI") |
(rownames(Samples) %in% grep("_1", Samples$Sample)  & Samples$Genotype_tmp == "IS")
), "Genotype_tmp"]<-"I"
# Make counts
GenoCounts<-dcast(Samples,formula=list(.(HapID),.(Genotype_tmp)),value.var="HapID",fun.aggregate=length)
GenoCounts
if( is.null(GenoCounts$I )){GenoCounts$I<-0}
if( is.null(GenoCounts$S )){GenoCounts$S<-0}
HaplotypesTable<-cbind(HaplotypesTable,GenoCounts[, c("S","I")])
library(plotly)
correlations <- read.table("correlation.table", header = FALSE)
colnames(correlations)<-c("correl_count", "mode", "winsize")
# correlations
library(ggplot2)
p<-ggplot(correlations)+
geom_boxplot(data = correlations[correlations$mode == "center",], aes(x=winsize,y=correl_count,fill=mode, group = winsize, color = mode), alpha = 0.5)+
geom_boxplot(data = correlations[correlations$mode == "prob",], aes(x=winsize,y=correl_count,fill=mode, group = winsize, color = mode), alpha = 0.5)  + geom_smooth(aes(x = winsize, y = correl_count, color = mode, fill = mode), alpha = 0)+
geom_vline(aes(xintercept = 10000), alpha = 0.1)+geom_vline(aes(xintercept = 50000), alpha = 0.1)+geom_vline(aes(xintercept = 200000), alpha = 0.1)
fig <- ggplotly(p)
fig
library(plotly)
correlations <- read.table("correlation.table", header = FALSE)
correlations <- read.table("correlation.table", header = FALSE)
colnames(correlations)<-c("correl_count", "mode", "winsize")
p<-ggplot(correlations)+
geom_boxplot(data = correlations[correlations$mode == "center",], aes(x=winsize,y=correl_count,fill=mode, group = winsize, color = mode), alpha = 0.5)+
geom_boxplot(data = correlations[correlations$mode == "prob",], aes(x=winsize,y=correl_count,fill=mode, group = winsize, color = mode), alpha = 0.5)  + geom_smooth(aes(x = winsize, y = correl_count, color = mode, fill = mode), alpha = 0)+
geom_vline(aes(xintercept = 10000), alpha = 0.1)+geom_vline(aes(xintercept = 50000), alpha = 0.1)+geom_vline(aes(xintercept = 200000), alpha = 0.1)
fig <- ggplotly(p)
fig
